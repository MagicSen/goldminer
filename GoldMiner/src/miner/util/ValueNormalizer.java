package miner.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;

/**
 * Utility class for normalizing the confidence values generated by different mining methods. This enables us to have
 * one common confidence threshold instead of one per method.
 */
public class ValueNormalizer {
    /**
     * Interface to be implemented by objects being possible targets for normalization
     */
    public static interface NormalizationTarget {
        public double getValue();
        public void setValue(double value);
    }


    /**
     * Identifies the available normalization modes
     */
    public static enum NormalizationMode {
        LOWER_BOUND,
        UPPER_BOUND,
        BOTH
    }

    private final static Logger log = LoggerFactory.getLogger(ValueNormalizer.class);
    private static int normalizerCount = 0;
    private String name;
    private double minValue = Double.MAX_VALUE;
    private double maxValue = Double.MIN_VALUE;

    /**
     * Initializes the normalization system with the given name. The name is mostly used to uniquely identify the
     * normalizer in log messages.
     *
     * @param name name identifying this normalizer uniquely
     */
    public ValueNormalizer(String name) {
        log.info("initializing with name '{}'", name);
        this.name = name;
    }

    /**
     * Initializes the normalization system using an automatically generated name.
     */
    public ValueNormalizer() {
        this("confidence-normalizer-" + normalizerCount);
        normalizerCount++;
    }

    /**
     * Reports the value of the given target to the normalizer so that it can be took into consideration for the
     * normalization phase
     *
     * @param target target whose value to report
     */
    public void reportValue(NormalizationTarget target) {
        log.debug("({}) Got value '{}' reported", name, target);
        double value = target.getValue();
        if (value > maxValue) {
            log.debug("({}) Applied '{}' as new max value, previous was '{}'", new Object[]{name, value, maxValue});
            maxValue = value;
        }

        if (value < minValue) {
            log.debug("({}) Applied '{}' as new min value, previous was '{}", new Object[]{name, value, minValue});
            minValue = value;
        }
    }

    /**
     * Reports the values of all normalization targets contained in the given collection to the normalizer.
     *
     * @param targets collection of targets whose values to report
     */
    public void reportValues(Collection<? extends NormalizationTarget> targets) {
        log.debug("({}) Reporting {} values to normalizer", name, targets.size());
        for (NormalizationTarget target : targets) {

        }
        log.debug("({}) Done reporting values", name);
    }

    /**
     * Normalizes the values contained in the given target. This method directly modifies the single objects in the
     * given collection. Take this into account when your collection is sensitive to such changes!
     *
     * @param collection collection of targets to normalize
     *
     */
    public void normalize(Collection<? extends NormalizationTarget> collection) {
        log.debug("({}) Starting normalization for collection containing {} elements", name, collection.size());
        log.debug("({}) Max value: {}", name, maxValue);
        log.debug("({}) Min value: {}", name, minValue);

        for (NormalizationTarget target : collection) {
            double scaledValue = scale(target.getValue());
            target.setValue(scaledValue);
        }
        log.debug("({}) Done normalization");
    }

    /**
     * Scales the given value according to the values this normalizer got reported.
     *
     * @param value value to scale
     * @return scaled value
     */
    private double scale(double value) {
        return (value - minValue) / (maxValue - minValue);
    }
}
